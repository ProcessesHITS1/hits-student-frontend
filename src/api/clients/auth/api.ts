/* tslint:disable */
/* eslint-disable */
/**
 * auth-service-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface CreateStudentGroupDto
 */
export interface CreateStudentGroupDto {
    /**
     * 
     * @type {number}
     * @memberof CreateStudentGroupDto
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'patronymic'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'sex'?: CreateUserDtoSexEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'groupId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserDto
     */
    'isStudent'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserDto
     */
    'isSchoolRepresentative'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateUserDto
     */
    'isAdmin'?: boolean;
}

export const CreateUserDtoSexEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type CreateUserDtoSexEnum = typeof CreateUserDtoSexEnum[keyof typeof CreateUserDtoSexEnum];

/**
 * 
 * @export
 * @interface EditUserInfoDto
 */
export interface EditUserInfoDto {
    /**
     * 
     * @type {string}
     * @memberof EditUserInfoDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserInfoDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserInfoDto
     */
    'patronymic'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserInfoDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof EditUserInfoDto
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface PageInfoDto
 */
export interface PageInfoDto {
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface StudentGroupInfoDto
 */
export interface StudentGroupInfoDto {
    /**
     * 
     * @type {string}
     * @memberof StudentGroupInfoDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentGroupInfoDto
     */
    'number'?: number;
}
/**
 * 
 * @export
 * @interface UserInfoDto
 */
export interface UserInfoDto {
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'patronymic'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    'sex'?: UserInfoDtoSexEnum;
    /**
     * 
     * @type {StudentGroupInfoDto}
     * @memberof UserInfoDto
     */
    'group'?: StudentGroupInfoDto;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInfoDto
     */
    'roles'?: Array<string>;
}

export const UserInfoDtoSexEnum = {
    Male: 'MALE',
    Female: 'FEMALE'
} as const;

export type UserInfoDtoSexEnum = typeof UserInfoDtoSexEnum[keyof typeof UserInfoDtoSexEnum];

/**
 * 
 * @export
 * @interface UserSignInDto
 */
export interface UserSignInDto {
    /**
     * 
     * @type {string}
     * @memberof UserSignInDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserSignInDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UsersWithPaginationDto
 */
export interface UsersWithPaginationDto {
    /**
     * 
     * @type {PageInfoDto}
     * @memberof UsersWithPaginationDto
     */
    'pageInfo'?: PageInfoDto;
    /**
     * 
     * @type {Array<UserInfoDto>}
     * @memberof UsersWithPaginationDto
     */
    'data'?: Array<UserInfoDto>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Сменить пароль.
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordDto: ChangePasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('changePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/api/users/profile/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать группу.
         * @param {CreateStudentGroupDto} createStudentGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentGroup: async (createStudentGroupDto: CreateStudentGroupDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStudentGroupDto' is not null or undefined
            assertParamExists('createStudentGroup', 'createStudentGroupDto', createStudentGroupDto)
            const localVarPath = `/api/student-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStudentGroupDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать пользователя.
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('createUser', 'createUserDto', createUserDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Редактировать данные пользователя.
         * @param {EditUserInfoDto} editUserInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserInfo: async (editUserInfoDto: EditUserInfoDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'editUserInfoDto' is not null or undefined
            assertParamExists('editUserInfo', 'editUserInfoDto', editUserInfoDto)
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editUserInfoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить пользователей.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о себе.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех групп.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentGroups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о конкретном пользователе.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserInfo', 'id', id)
            const localVarPath = `/api/users/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Вход в систему.
         * @param {UserSignInDto} userSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn: async (userSignInDto: UserSignInDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignInDto' is not null or undefined
            assertParamExists('signIn', 'userSignInDto', userSignInDto)
            const localVarPath = `/api/users/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Сменить пароль.
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordDto: ChangePasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать группу.
         * @param {CreateStudentGroupDto} createStudentGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStudentGroup(createStudentGroupDto: CreateStudentGroupDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStudentGroup(createStudentGroupDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createStudentGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать пользователя.
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Редактировать данные пользователя.
         * @param {EditUserInfoDto} editUserInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUserInfo(editUserInfoDto: EditUserInfoDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUserInfo(editUserInfoDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить пользователей.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersWithPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о себе.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUserInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUserInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAuthenticatedUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех групп.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentGroupInfoDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentGroups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStudentGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о конкретном пользователе.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Вход в систему.
         * @param {UserSignInDto} userSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signIn(userSignInDto: UserSignInDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(userSignInDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Сменить пароль.
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать группу.
         * @param {CreateStudentGroupDto} createStudentGroupDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStudentGroup(createStudentGroupDto: CreateStudentGroupDto, options?: any): AxiosPromise<void> {
            return localVarFp.createStudentGroup(createStudentGroupDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать пользователя.
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(createUserDto: CreateUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.createUser(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Редактировать данные пользователя.
         * @param {EditUserInfoDto} editUserInfoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserInfo(editUserInfoDto: EditUserInfoDto, options?: any): AxiosPromise<UserInfoDto> {
            return localVarFp.editUserInfo(editUserInfoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить пользователей.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(page?: number, size?: number, options?: any): AxiosPromise<UsersWithPaginationDto> {
            return localVarFp.getAllUsers(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о себе.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUserInfo(options?: any): AxiosPromise<UserInfoDto> {
            return localVarFp.getAuthenticatedUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех групп.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentGroups(options?: any): AxiosPromise<Array<StudentGroupInfoDto>> {
            return localVarFp.getStudentGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о конкретном пользователе.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(id: string, options?: any): AxiosPromise<UserInfoDto> {
            return localVarFp.getUserInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Вход в систему.
         * @param {UserSignInDto} userSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signIn(userSignInDto: UserSignInDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.signIn(userSignInDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Сменить пароль.
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePassword(changePasswordDto: ChangePasswordDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать группу.
     * @param {CreateStudentGroupDto} createStudentGroupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createStudentGroup(createStudentGroupDto: CreateStudentGroupDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createStudentGroup(createStudentGroupDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать пользователя.
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUser(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUser(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Редактировать данные пользователя.
     * @param {EditUserInfoDto} editUserInfoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editUserInfo(editUserInfoDto: EditUserInfoDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editUserInfo(editUserInfoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить пользователей.
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllUsers(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllUsers(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о себе.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthenticatedUserInfo(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAuthenticatedUserInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех групп.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudentGroups(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudentGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о конкретном пользователе.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserInfo(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserInfo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Вход в систему.
     * @param {UserSignInDto} userSignInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signIn(userSignInDto: UserSignInDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signIn(userSignInDto, options).then((request) => request(this.axios, this.basePath));
    }
}



