/* tslint:disable */
/* eslint-disable */
/**
 * company-management-service-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CompaniesWithPaginationDto
 */
export interface CompaniesWithPaginationDto {
    /**
     * 
     * @type {PageInfoDto}
     * @memberof CompaniesWithPaginationDto
     */
    'pageInfo'?: PageInfoDto;
    /**
     * 
     * @type {Array<CompanyDto>}
     * @memberof CompaniesWithPaginationDto
     */
    'data'?: Array<CompanyDto>;
}
/**
 * 
 * @export
 * @interface CompanyDto
 */
export interface CompanyDto {
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyDto
     */
    'curatorId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyDto
     */
    'contacts'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateUpdateCompanyDto
 */
export interface CreateUpdateCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateCompanyDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateCompanyDto
     */
    'curatorId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateUpdateCompanyDto
     */
    'contacts'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageInfoDto
 */
export interface PageInfoDto {
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageSize'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать компанию.
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany: async (createUpdateCompanyDto: CreateUpdateCompanyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUpdateCompanyDto' is not null or undefined
            assertParamExists('createCompany', 'createUpdateCompanyDto', createUpdateCompanyDto)
            const localVarPath = `/api/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdateCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить компанию.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCompany', 'id', id)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех компаний с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompanies: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о компании по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompany', 'id', id)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить данные компании.
         * @param {string} id 
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany: async (id: string, createUpdateCompanyDto: CreateUpdateCompanyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCompany', 'id', id)
            // verify required parameter 'createUpdateCompanyDto' is not null or undefined
            assertParamExists('updateCompany', 'createUpdateCompanyDto', createUpdateCompanyDto)
            const localVarPath = `/api/companies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdateCompanyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создать компанию.
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompany(createUpdateCompanyDto: CreateUpdateCompanyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompany(createUpdateCompanyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить компанию.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompany(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompany(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех компаний с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCompanies(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompaniesWithPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCompanies(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllCompanies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о компании по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить данные компании.
         * @param {string} id 
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompany(id: string, createUpdateCompanyDto: CreateUpdateCompanyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompany(id, createUpdateCompanyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateCompany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Создать компанию.
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompany(createUpdateCompanyDto: CreateUpdateCompanyDto, options?: any): AxiosPromise<void> {
            return localVarFp.createCompany(createUpdateCompanyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить компанию.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompany(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCompany(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех компаний с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompanies(page?: number, size?: number, options?: any): AxiosPromise<CompaniesWithPaginationDto> {
            return localVarFp.getAllCompanies(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о компании по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(id: string, options?: any): AxiosPromise<CompanyDto> {
            return localVarFp.getCompany(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить данные компании.
         * @param {string} id 
         * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompany(id: string, createUpdateCompanyDto: CreateUpdateCompanyDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateCompany(id, createUpdateCompanyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Создать компанию.
     * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createCompany(createUpdateCompanyDto: CreateUpdateCompanyDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createCompany(createUpdateCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить компанию.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompany(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompany(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех компаний с пагинацией.
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllCompanies(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllCompanies(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о компании по ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompany(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompany(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить данные компании.
     * @param {string} id 
     * @param {CreateUpdateCompanyDto} createUpdateCompanyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCompany(id: string, createUpdateCompanyDto: CreateUpdateCompanyDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCompany(id, createUpdateCompanyDto, options).then((request) => request(this.axios, this.basePath));
    }
}



