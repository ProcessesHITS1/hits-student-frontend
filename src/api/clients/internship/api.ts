/* tslint:disable */
/* eslint-disable */
/**
 * third-course-service-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddDiaryDto
 */
export interface AddDiaryDto {
    /**
     * 
     * @type {string}
     * @memberof AddDiaryDto
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDiaryDto
     */
    'studentInSemesterId'?: string;
}
/**
 * 
 * @export
 * @interface AddDiaryFeedbackDto
 */
export interface AddDiaryFeedbackDto {
    /**
     * 
     * @type {string}
     * @memberof AddDiaryFeedbackDto
     */
    'diaryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDiaryFeedbackDto
     */
    'comments'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDiaryFeedbackDto
     */
    'acceptanceStatus'?: AddDiaryFeedbackDtoAcceptanceStatusEnum;
}

export const AddDiaryFeedbackDtoAcceptanceStatusEnum = {
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;

export type AddDiaryFeedbackDtoAcceptanceStatusEnum = typeof AddDiaryFeedbackDtoAcceptanceStatusEnum[keyof typeof AddDiaryFeedbackDtoAcceptanceStatusEnum];

/**
 * 
 * @export
 * @interface AddStudentToSemesterDto
 */
export interface AddStudentToSemesterDto {
    /**
     * 
     * @type {string}
     * @memberof AddStudentToSemesterDto
     */
    'studentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddStudentToSemesterDto
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddStudentToSemesterDto
     */
    'semesterId'?: string;
}
/**
 * 
 * @export
 * @interface AddStudentsToSemesterDto
 */
export interface AddStudentsToSemesterDto {
    /**
     * 
     * @type {Array<AddStudentToSemesterDto>}
     * @memberof AddStudentsToSemesterDto
     */
    'studentsInSemester'?: Array<AddStudentToSemesterDto>;
}
/**
 * 
 * @export
 * @interface AssignMarkDto
 */
export interface AssignMarkDto {
    /**
     * 
     * @type {string}
     * @memberof AssignMarkDto
     */
    'markRequirementId'?: string;
    /**
     * 
     * @type {number}
     * @memberof AssignMarkDto
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface CloneSemesterDto
 */
export interface CloneSemesterDto {
    /**
     * 
     * @type {string}
     * @memberof CloneSemesterDto
     */
    'semesterIdToClone': string;
    /**
     * 
     * @type {CreateUpdateSemesterDto}
     * @memberof CloneSemesterDto
     */
    'newSemesterData': CreateUpdateSemesterDto;
}
/**
 * 
 * @export
 * @interface CreateMarkRequirementDto
 */
export interface CreateMarkRequirementDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMarkRequirementDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateMarkRequirementDto
     */
    'semesterId'?: string;
}
/**
 * 
 * @export
 * @interface CreateUpdateSemesterDto
 */
export interface CreateUpdateSemesterDto {
    /**
     * 
     * @type {number}
     * @memberof CreateUpdateSemesterDto
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateUpdateSemesterDto
     */
    'semester'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateSemesterDto
     */
    'seasonId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUpdateSemesterDto
     */
    'documentsDeadline'?: string;
}
/**
 * 
 * @export
 * @interface DiaryDto
 */
export interface DiaryDto {
    /**
     * 
     * @type {string}
     * @memberof DiaryDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiaryDto
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiaryDto
     */
    'attachedAt'?: string;
    /**
     * 
     * @type {DiaryFeedbackDto}
     * @memberof DiaryDto
     */
    'diaryFeedback'?: DiaryFeedbackDto;
}
/**
 * 
 * @export
 * @interface DiaryFeedbackDto
 */
export interface DiaryFeedbackDto {
    /**
     * 
     * @type {string}
     * @memberof DiaryFeedbackDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiaryFeedbackDto
     */
    'comments'?: string;
    /**
     * 
     * @type {string}
     * @memberof DiaryFeedbackDto
     */
    'acceptanceStatus'?: DiaryFeedbackDtoAcceptanceStatusEnum;
}

export const DiaryFeedbackDtoAcceptanceStatusEnum = {
    Accepted: 'ACCEPTED',
    Rejected: 'REJECTED'
} as const;

export type DiaryFeedbackDtoAcceptanceStatusEnum = typeof DiaryFeedbackDtoAcceptanceStatusEnum[keyof typeof DiaryFeedbackDtoAcceptanceStatusEnum];

/**
 * 
 * @export
 * @interface MarkDto
 */
export interface MarkDto {
    /**
     * 
     * @type {string}
     * @memberof MarkDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof MarkDto
     */
    'value'?: number;
    /**
     * 
     * @type {StudentInSemesterDto}
     * @memberof MarkDto
     */
    'student'?: StudentInSemesterDto;
    /**
     * 
     * @type {MarkRequirementDto}
     * @memberof MarkDto
     */
    'markRequirement'?: MarkRequirementDto;
}
/**
 * 
 * @export
 * @interface MarkRequirementDto
 */
export interface MarkRequirementDto {
    /**
     * 
     * @type {string}
     * @memberof MarkRequirementDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkRequirementDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MarkRequirementDto
     */
    'semesterId'?: string;
}
/**
 * 
 * @export
 * @interface PageInfoDto
 */
export interface PageInfoDto {
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageInfoDto
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface SemesterDto
 */
export interface SemesterDto {
    /**
     * 
     * @type {string}
     * @memberof SemesterDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SemesterDto
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof SemesterDto
     */
    'semester'?: number;
    /**
     * 
     * @type {string}
     * @memberof SemesterDto
     */
    'seasonId'?: string;
    /**
     * 
     * @type {string}
     * @memberof SemesterDto
     */
    'documentsDeadline'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SemesterDto
     */
    'isClosed'?: boolean;
}
/**
 * 
 * @export
 * @interface SemestersWithPaginationDto
 */
export interface SemestersWithPaginationDto {
    /**
     * 
     * @type {PageInfoDto}
     * @memberof SemestersWithPaginationDto
     */
    'pageInfo'?: PageInfoDto;
    /**
     * 
     * @type {Array<SemesterDto>}
     * @memberof SemestersWithPaginationDto
     */
    'data'?: Array<SemesterDto>;
}
/**
 * 
 * @export
 * @interface StudentInSemesterDto
 */
export interface StudentInSemesterDto {
    /**
     * 
     * @type {string}
     * @memberof StudentInSemesterDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInSemesterDto
     */
    'studentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInSemesterDto
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInSemesterDto
     */
    'semesterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInSemesterDto
     */
    'diaryId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudentInSemesterDto
     */
    'internshipPassed'?: boolean;
}
/**
 * 
 * @export
 * @interface StudentTransferToThirdCourseDto
 */
export interface StudentTransferToThirdCourseDto {
    /**
     * 
     * @type {string}
     * @memberof StudentTransferToThirdCourseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTransferToThirdCourseDto
     */
    'companyId'?: string;
}
/**
 * 
 * @export
 * @interface StudentsInSemesterWithPaginationDto
 */
export interface StudentsInSemesterWithPaginationDto {
    /**
     * 
     * @type {PageInfoDto}
     * @memberof StudentsInSemesterWithPaginationDto
     */
    'pageInfo'?: PageInfoDto;
    /**
     * 
     * @type {Array<StudentInSemesterDto>}
     * @memberof StudentsInSemesterWithPaginationDto
     */
    'data'?: Array<StudentInSemesterDto>;
}
/**
 * 
 * @export
 * @interface TransferStudentsToThirdCourseDto
 */
export interface TransferStudentsToThirdCourseDto {
    /**
     * 
     * @type {number}
     * @memberof TransferStudentsToThirdCourseDto
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransferStudentsToThirdCourseDto
     */
    'seasonId'?: string;
    /**
     * 
     * @type {Array<StudentTransferToThirdCourseDto>}
     * @memberof TransferStudentsToThirdCourseDto
     */
    'students'?: Array<StudentTransferToThirdCourseDto>;
}
/**
 * 
 * @export
 * @interface UpdateMarkDto
 */
export interface UpdateMarkDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateMarkDto
     */
    'value'?: number;
}
/**
 * 
 * @export
 * @interface UpdateStudentInSemesterDto
 */
export interface UpdateStudentInSemesterDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateStudentInSemesterDto
     */
    'companyId'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Добавить дневник.
         * @param {AddDiaryDto} addDiaryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDiary: async (addDiaryDto: AddDiaryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addDiaryDto' is not null or undefined
            assertParamExists('addDiary', 'addDiaryDto', addDiaryDto)
            const localVarPath = `/api/diaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDiaryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавить фидбэк к дневнику.
         * @param {AddDiaryFeedbackDto} addDiaryFeedbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDiaryFeedback: async (addDiaryFeedbackDto: AddDiaryFeedbackDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addDiaryFeedbackDto' is not null or undefined
            assertParamExists('addDiaryFeedback', 'addDiaryFeedbackDto', addDiaryFeedbackDto)
            const localVarPath = `/api/diaries-feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDiaryFeedbackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавить студентов в семестр.
         * @param {AddStudentsToSemesterDto} addStudentsToSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentsToSemester: async (addStudentsToSemesterDto: AddStudentsToSemesterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addStudentsToSemesterDto' is not null or undefined
            assertParamExists('addStudentsToSemester', 'addStudentsToSemesterDto', addStudentsToSemesterDto)
            const localVarPath = `/api/students-in-semesters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addStudentsToSemesterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Назначить оценку.
         * @param {string} studentInSemesterId 
         * @param {AssignMarkDto} assignMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignMark: async (studentInSemesterId: string, assignMarkDto: AssignMarkDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentInSemesterId' is not null or undefined
            assertParamExists('assignMark', 'studentInSemesterId', studentInSemesterId)
            // verify required parameter 'assignMarkDto' is not null or undefined
            assertParamExists('assignMark', 'assignMarkDto', assignMarkDto)
            const localVarPath = `/api/marks/student-in-semester/{studentInSemesterId}`
                .replace(`{${"studentInSemesterId"}}`, encodeURIComponent(String(studentInSemesterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignMarkDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Клонировать семестр.
         * @param {CloneSemesterDto} cloneSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneSemester: async (cloneSemesterDto: CloneSemesterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cloneSemesterDto' is not null or undefined
            assertParamExists('cloneSemester', 'cloneSemesterDto', cloneSemesterDto)
            const localVarPath = `/api/semesters/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cloneSemesterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Закрыть семестр.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeSemester: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('closeSemester', 'id', id)
            const localVarPath = `/api/semesters/{id}/close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать требование к оценке.
         * @param {CreateMarkRequirementDto} createMarkRequirementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarkRequirement: async (createMarkRequirementDto: CreateMarkRequirementDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMarkRequirementDto' is not null or undefined
            assertParamExists('createMarkRequirement', 'createMarkRequirementDto', createMarkRequirementDto)
            const localVarPath = `/api/mark-requirements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMarkRequirementDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать семестр.
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSemester: async (createUpdateSemesterDto: CreateUpdateSemesterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUpdateSemesterDto' is not null or undefined
            assertParamExists('createSemester', 'createUpdateSemesterDto', createUpdateSemesterDto)
            const localVarPath = `/api/semesters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdateSemesterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение файла по id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('download', 'id', id)
            const localVarPath = `/api/files/download/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех семестров с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSemesters: async (page?: number, size?: number, seasonId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/semesters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список всех студентов в семестрах с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStudentsInSemester: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/students-in-semesters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiary: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDiary', 'id', id)
            const localVarPath = `/api/diaries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить требования к оценке.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkRequirements: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mark-requirements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить требования к оценкам в конкретном семестре.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkRequirements1: async (semesterId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'semesterId' is not null or undefined
            assertParamExists('getMarkRequirements1', 'semesterId', semesterId)
            const localVarPath = `/api/mark-requirements/semester/{semesterId}`
                .replace(`{${"semesterId"}}`, encodeURIComponent(String(semesterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить оценки студента в семестре.
         * @param {string} studentInSemesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarksByStudent: async (studentInSemesterId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentInSemesterId' is not null or undefined
            assertParamExists('getMarksByStudent', 'studentInSemesterId', studentInSemesterId)
            const localVarPath = `/api/marks/student-in-semester/{studentInSemesterId}`
                .replace(`{${"studentInSemesterId"}}`, encodeURIComponent(String(studentInSemesterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить собственные оценки за семестр.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMarksForSemester: async (semesterId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'semesterId' is not null or undefined
            assertParamExists('getMyMarksForSemester', 'semesterId', semesterId)
            const localVarPath = `/api/marks/semester/{semesterId}/my`
                .replace(`{${"semesterId"}}`, encodeURIComponent(String(semesterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение собственных семестров в конкретном сезоне.
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySemestersInSeason: async (seasonId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seasonId' is not null or undefined
            assertParamExists('getMySemestersInSeason', 'seasonId', seasonId)
            const localVarPath = `/api/semesters/season/{seasonId}/my`
                .replace(`{${"seasonId"}}`, encodeURIComponent(String(seasonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemester: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSemester', 'id', id)
            const localVarPath = `/api/semesters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента в семестре.
         * @param {string} semesterId 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDiary: async (semesterId: string, studentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'semesterId' is not null or undefined
            assertParamExists('getStudentDiary', 'semesterId', semesterId)
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudentDiary', 'studentId', studentId)
            const localVarPath = `/api/diaries/semester/{semesterId}/student/{studentId}`
                .replace(`{${"semesterId"}}`, encodeURIComponent(String(semesterId)))
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить информацию о студенте в семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentInSemester: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getStudentInSemester', 'id', id)
            const localVarPath = `/api/students-in-semesters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Перенести студентов на третий курс.
         * @param {TransferStudentsToThirdCourseDto} transferStudentsToThirdCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferToThirdCourse: async (transferStudentsToThirdCourseDto: TransferStudentsToThirdCourseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferStudentsToThirdCourseDto' is not null or undefined
            assertParamExists('transferToThirdCourse', 'transferStudentsToThirdCourseDto', transferStudentsToThirdCourseDto)
            const localVarPath = `/api/students-in-semesters/transfer-to-third-course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferStudentsToThirdCourseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить оценку.
         * @param {string} id 
         * @param {UpdateMarkDto} updateMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMark: async (id: string, updateMarkDto: UpdateMarkDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMark', 'id', id)
            // verify required parameter 'updateMarkDto' is not null or undefined
            assertParamExists('updateMark', 'updateMarkDto', updateMarkDto)
            const localVarPath = `/api/marks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMarkDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить данные семестра.
         * @param {string} id 
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSemester: async (id: string, createUpdateSemesterDto: CreateUpdateSemesterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSemester', 'id', id)
            // verify required parameter 'createUpdateSemesterDto' is not null or undefined
            assertParamExists('updateSemester', 'createUpdateSemesterDto', createUpdateSemesterDto)
            const localVarPath = `/api/semesters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUpdateSemesterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить данные студента в семестре.
         * @param {string} id 
         * @param {UpdateStudentInSemesterDto} updateStudentInSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentInSemester: async (id: string, updateStudentInSemesterDto: UpdateStudentInSemesterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStudentInSemester', 'id', id)
            // verify required parameter 'updateStudentInSemesterDto' is not null or undefined
            assertParamExists('updateStudentInSemester', 'updateStudentInSemesterDto', updateStudentInSemesterDto)
            const localVarPath = `/api/students-in-semesters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStudentInSemesterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Загрузка файла.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('upload', 'file', file)
            const localVarPath = `/api/files/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Добавить дневник.
         * @param {AddDiaryDto} addDiaryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDiary(addDiaryDto: AddDiaryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDiary(addDiaryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавить фидбэк к дневнику.
         * @param {AddDiaryFeedbackDto} addDiaryFeedbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDiaryFeedback(addDiaryFeedbackDto: AddDiaryFeedbackDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDiaryFeedback(addDiaryFeedbackDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addDiaryFeedback']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавить студентов в семестр.
         * @param {AddStudentsToSemesterDto} addStudentsToSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addStudentsToSemester(addStudentsToSemesterDto: AddStudentsToSemesterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addStudentsToSemester(addStudentsToSemesterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addStudentsToSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Назначить оценку.
         * @param {string} studentInSemesterId 
         * @param {AssignMarkDto} assignMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignMark(studentInSemesterId: string, assignMarkDto: AssignMarkDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignMark(studentInSemesterId, assignMarkDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.assignMark']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Клонировать семестр.
         * @param {CloneSemesterDto} cloneSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneSemester(cloneSemesterDto: CloneSemesterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneSemester(cloneSemesterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.cloneSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Закрыть семестр.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeSemester(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeSemester(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.closeSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать требование к оценке.
         * @param {CreateMarkRequirementDto} createMarkRequirementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMarkRequirement(createMarkRequirementDto: CreateMarkRequirementDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMarkRequirement(createMarkRequirementDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createMarkRequirement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать семестр.
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSemester(createUpdateSemesterDto: CreateUpdateSemesterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSemester(createUpdateSemesterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получение файла по id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async download(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.download(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.download']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех семестров с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSemesters(page?: number, size?: number, seasonId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SemestersWithPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSemesters(page, size, seasonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllSemesters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список всех студентов в семестрах с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStudentsInSemester(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsInSemesterWithPaginationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStudentsInSemester(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getAllStudentsInSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiary(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDiary(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить требования к оценке.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarkRequirements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarkRequirementDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarkRequirements(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMarkRequirements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить требования к оценкам в конкретном семестре.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarkRequirements1(semesterId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarkRequirementDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarkRequirements1(semesterId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMarkRequirements1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить оценки студента в семестре.
         * @param {string} studentInSemesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarksByStudent(studentInSemesterId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarkDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarksByStudent(studentInSemesterId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMarksByStudent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить собственные оценки за семестр.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyMarksForSemester(semesterId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarkDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyMarksForSemester(semesterId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyMarksForSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получение собственных семестров в конкретном сезоне.
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMySemestersInSeason(seasonId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SemesterDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMySemestersInSeason(seasonId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMySemestersInSeason']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSemester(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SemesterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSemester(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента в семестре.
         * @param {string} semesterId 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentDiary(semesterId: string, studentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentDiary(semesterId, studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStudentDiary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить информацию о студенте в семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStudentInSemester(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentInSemesterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStudentInSemester(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getStudentInSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Перенести студентов на третий курс.
         * @param {TransferStudentsToThirdCourseDto} transferStudentsToThirdCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferToThirdCourse(transferStudentsToThirdCourseDto: TransferStudentsToThirdCourseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferToThirdCourse(transferStudentsToThirdCourseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.transferToThirdCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить оценку.
         * @param {string} id 
         * @param {UpdateMarkDto} updateMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMark(id: string, updateMarkDto: UpdateMarkDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMark(id, updateMarkDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateMark']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить данные семестра.
         * @param {string} id 
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSemester(id: string, createUpdateSemesterDto: CreateUpdateSemesterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSemester(id, createUpdateSemesterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить данные студента в семестре.
         * @param {string} id 
         * @param {UpdateStudentInSemesterDto} updateStudentInSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStudentInSemester(id: string, updateStudentInSemesterDto: UpdateStudentInSemesterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStudentInSemester(id, updateStudentInSemesterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updateStudentInSemester']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Загрузка файла.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upload(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upload(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.upload']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Добавить дневник.
         * @param {AddDiaryDto} addDiaryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDiary(addDiaryDto: AddDiaryDto, options?: any): AxiosPromise<void> {
            return localVarFp.addDiary(addDiaryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавить фидбэк к дневнику.
         * @param {AddDiaryFeedbackDto} addDiaryFeedbackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDiaryFeedback(addDiaryFeedbackDto: AddDiaryFeedbackDto, options?: any): AxiosPromise<void> {
            return localVarFp.addDiaryFeedback(addDiaryFeedbackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавить студентов в семестр.
         * @param {AddStudentsToSemesterDto} addStudentsToSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addStudentsToSemester(addStudentsToSemesterDto: AddStudentsToSemesterDto, options?: any): AxiosPromise<void> {
            return localVarFp.addStudentsToSemester(addStudentsToSemesterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Назначить оценку.
         * @param {string} studentInSemesterId 
         * @param {AssignMarkDto} assignMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignMark(studentInSemesterId: string, assignMarkDto: AssignMarkDto, options?: any): AxiosPromise<void> {
            return localVarFp.assignMark(studentInSemesterId, assignMarkDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Клонировать семестр.
         * @param {CloneSemesterDto} cloneSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneSemester(cloneSemesterDto: CloneSemesterDto, options?: any): AxiosPromise<void> {
            return localVarFp.cloneSemester(cloneSemesterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Закрыть семестр.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeSemester(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.closeSemester(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать требование к оценке.
         * @param {CreateMarkRequirementDto} createMarkRequirementDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarkRequirement(createMarkRequirementDto: CreateMarkRequirementDto, options?: any): AxiosPromise<void> {
            return localVarFp.createMarkRequirement(createMarkRequirementDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать семестр.
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSemester(createUpdateSemesterDto: CreateUpdateSemesterDto, options?: any): AxiosPromise<void> {
            return localVarFp.createSemester(createUpdateSemesterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение файла по id.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        download(id: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.download(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех семестров с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [seasonId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSemesters(page?: number, size?: number, seasonId?: string, options?: any): AxiosPromise<SemestersWithPaginationDto> {
            return localVarFp.getAllSemesters(page, size, seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список всех студентов в семестрах с пагинацией.
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStudentsInSemester(page?: number, size?: number, options?: any): AxiosPromise<StudentsInSemesterWithPaginationDto> {
            return localVarFp.getAllStudentsInSemester(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiary(id: string, options?: any): AxiosPromise<DiaryDto> {
            return localVarFp.getDiary(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить требования к оценке.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkRequirements(options?: any): AxiosPromise<Array<MarkRequirementDto>> {
            return localVarFp.getMarkRequirements(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить требования к оценкам в конкретном семестре.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarkRequirements1(semesterId: string, options?: any): AxiosPromise<Array<MarkRequirementDto>> {
            return localVarFp.getMarkRequirements1(semesterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить оценки студента в семестре.
         * @param {string} studentInSemesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarksByStudent(studentInSemesterId: string, options?: any): AxiosPromise<Array<MarkDto>> {
            return localVarFp.getMarksByStudent(studentInSemesterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить собственные оценки за семестр.
         * @param {string} semesterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyMarksForSemester(semesterId: string, options?: any): AxiosPromise<Array<MarkDto>> {
            return localVarFp.getMyMarksForSemester(semesterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получение собственных семестров в конкретном сезоне.
         * @param {string} seasonId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMySemestersInSeason(seasonId: string, options?: any): AxiosPromise<Array<SemesterDto>> {
            return localVarFp.getMySemestersInSeason(seasonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSemester(id: string, options?: any): AxiosPromise<SemesterDto> {
            return localVarFp.getSemester(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о дневнике студента в семестре.
         * @param {string} semesterId 
         * @param {string} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDiary(semesterId: string, studentId: string, options?: any): AxiosPromise<DiaryDto> {
            return localVarFp.getStudentDiary(semesterId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить информацию о студенте в семестре по ID.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentInSemester(id: string, options?: any): AxiosPromise<StudentInSemesterDto> {
            return localVarFp.getStudentInSemester(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Перенести студентов на третий курс.
         * @param {TransferStudentsToThirdCourseDto} transferStudentsToThirdCourseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferToThirdCourse(transferStudentsToThirdCourseDto: TransferStudentsToThirdCourseDto, options?: any): AxiosPromise<void> {
            return localVarFp.transferToThirdCourse(transferStudentsToThirdCourseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить оценку.
         * @param {string} id 
         * @param {UpdateMarkDto} updateMarkDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMark(id: string, updateMarkDto: UpdateMarkDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateMark(id, updateMarkDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить данные семестра.
         * @param {string} id 
         * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSemester(id: string, createUpdateSemesterDto: CreateUpdateSemesterDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateSemester(id, createUpdateSemesterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить данные студента в семестре.
         * @param {string} id 
         * @param {UpdateStudentInSemesterDto} updateStudentInSemesterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentInSemester(id: string, updateStudentInSemesterDto: UpdateStudentInSemesterDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateStudentInSemester(id, updateStudentInSemesterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Загрузка файла.
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upload(file: File, options?: any): AxiosPromise<string> {
            return localVarFp.upload(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Добавить дневник.
     * @param {AddDiaryDto} addDiaryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addDiary(addDiaryDto: AddDiaryDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addDiary(addDiaryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавить фидбэк к дневнику.
     * @param {AddDiaryFeedbackDto} addDiaryFeedbackDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addDiaryFeedback(addDiaryFeedbackDto: AddDiaryFeedbackDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addDiaryFeedback(addDiaryFeedbackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавить студентов в семестр.
     * @param {AddStudentsToSemesterDto} addStudentsToSemesterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addStudentsToSemester(addStudentsToSemesterDto: AddStudentsToSemesterDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addStudentsToSemester(addStudentsToSemesterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Назначить оценку.
     * @param {string} studentInSemesterId 
     * @param {AssignMarkDto} assignMarkDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public assignMark(studentInSemesterId: string, assignMarkDto: AssignMarkDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).assignMark(studentInSemesterId, assignMarkDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Клонировать семестр.
     * @param {CloneSemesterDto} cloneSemesterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cloneSemester(cloneSemesterDto: CloneSemesterDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).cloneSemester(cloneSemesterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Закрыть семестр.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public closeSemester(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).closeSemester(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать требование к оценке.
     * @param {CreateMarkRequirementDto} createMarkRequirementDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createMarkRequirement(createMarkRequirementDto: CreateMarkRequirementDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createMarkRequirement(createMarkRequirementDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать семестр.
     * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSemester(createUpdateSemesterDto: CreateUpdateSemesterDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createSemester(createUpdateSemesterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение файла по id.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public download(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).download(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех семестров с пагинацией.
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [seasonId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSemesters(page?: number, size?: number, seasonId?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSemesters(page, size, seasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список всех студентов в семестрах с пагинацией.
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllStudentsInSemester(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllStudentsInSemester(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о дневнике студента по ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDiary(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDiary(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить требования к оценке.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMarkRequirements(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMarkRequirements(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить требования к оценкам в конкретном семестре.
     * @param {string} semesterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMarkRequirements1(semesterId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMarkRequirements1(semesterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить оценки студента в семестре.
     * @param {string} studentInSemesterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMarksByStudent(studentInSemesterId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMarksByStudent(studentInSemesterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить собственные оценки за семестр.
     * @param {string} semesterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyMarksForSemester(semesterId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyMarksForSemester(semesterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получение собственных семестров в конкретном сезоне.
     * @param {string} seasonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMySemestersInSeason(seasonId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMySemestersInSeason(seasonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о семестре по ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSemester(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSemester(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о дневнике студента в семестре.
     * @param {string} semesterId 
     * @param {string} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudentDiary(semesterId: string, studentId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudentDiary(semesterId, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить информацию о студенте в семестре по ID.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStudentInSemester(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStudentInSemester(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Перенести студентов на третий курс.
     * @param {TransferStudentsToThirdCourseDto} transferStudentsToThirdCourseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public transferToThirdCourse(transferStudentsToThirdCourseDto: TransferStudentsToThirdCourseDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).transferToThirdCourse(transferStudentsToThirdCourseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить оценку.
     * @param {string} id 
     * @param {UpdateMarkDto} updateMarkDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMark(id: string, updateMarkDto: UpdateMarkDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMark(id, updateMarkDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить данные семестра.
     * @param {string} id 
     * @param {CreateUpdateSemesterDto} createUpdateSemesterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSemester(id: string, createUpdateSemesterDto: CreateUpdateSemesterDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSemester(id, createUpdateSemesterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить данные студента в семестре.
     * @param {string} id 
     * @param {UpdateStudentInSemesterDto} updateStudentInSemesterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStudentInSemester(id: string, updateStudentInSemesterDto: UpdateStudentInSemesterDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateStudentInSemester(id, updateStudentInSemesterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Загрузка файла.
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upload(file: File, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upload(file, options).then((request) => request(this.axios, this.basePath));
    }
}



