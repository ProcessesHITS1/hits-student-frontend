/* tslint:disable */
/* eslint-disable */
/**
 * Interview service api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * @type ApiPositionPostRequest
 * @export
 */
export type ApiPositionPostRequest = PositionCreation | PositionInfo;

/**
 * @type ApiSeasonYearPutRequest
 * @export
 */
export type ApiSeasonYearPutRequest = Season | SeasonData;

/**
 * 
 * @export
 * @interface CompanyInSeasonInfo
 */
export interface CompanyInSeasonInfo {
    /**
     * 
     * @type {string}
     * @memberof CompanyInSeasonInfo
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyInSeasonInfo
     */
    'seasonYear'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyInSeasonInfo
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyInSeasonInfo
     */
    'nPositions'?: number;
}
/**
 * 
 * @export
 * @interface PaginationInfo
 */
export interface PaginationInfo {
    /**
     * 
     * @type {number}
     * @memberof PaginationInfo
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationInfo
     */
    'totalItems'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationInfo
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface PositionCreation
 */
export interface PositionCreation {
    /**
     * 
     * @type {string}
     * @memberof PositionCreation
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionCreation
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PositionCreation
     */
    'nSeats'?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionCreation
     */
    'companyId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionCreation
     */
    'seasonYear'?: number;
}
/**
 * 
 * @export
 * @interface PositionInfo
 */
export interface PositionInfo {
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionInfo
     */
    'nRequests'?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'companyName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PositionInfo
     */
    'nSeats'?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'companyId'?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionInfo
     */
    'seasonYear'?: number;
}
/**
 * 
 * @export
 * @interface PositionInfoPaginatedItems
 */
export interface PositionInfoPaginatedItems {
    /**
     * 
     * @type {PaginationInfo}
     * @memberof PositionInfoPaginatedItems
     */
    'paginationInfo'?: PaginationInfo | null;
    /**
     * 
     * @type {Array<PositionInfo>}
     * @memberof PositionInfoPaginatedItems
     */
    'items'?: Array<PositionInfo> | null;
}
/**
 * 
 * @export
 * @interface PositionUpdate
 */
export interface PositionUpdate {
    /**
     * 
     * @type {string}
     * @memberof PositionUpdate
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PositionUpdate
     */
    'nSeats'?: number | null;
}
/**
 * 
 * @export
 * @interface RequestData
 */
export interface RequestData {
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'studentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'studentName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'positionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestData
     */
    'positionTitle'?: string | null;
    /**
     * 
     * @type {Array<RequestStatusSnapshotData>}
     * @memberof RequestData
     */
    'requestStatusSnapshots'?: Array<RequestStatusSnapshotData> | null;
    /**
     * 
     * @type {RequestResultData}
     * @memberof RequestData
     */
    'requestResult'?: RequestResultData | null;
}
/**
 * 
 * @export
 * @interface RequestDataPaginatedItems
 */
export interface RequestDataPaginatedItems {
    /**
     * 
     * @type {PaginationInfo}
     * @memberof RequestDataPaginatedItems
     */
    'paginationInfo'?: PaginationInfo | null;
    /**
     * 
     * @type {Array<RequestData>}
     * @memberof RequestDataPaginatedItems
     */
    'items'?: Array<RequestData> | null;
}
/**
 * 
 * @export
 * @interface RequestDetails
 */
export interface RequestDetails {
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'studentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'positionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'status'?: RequestDetailsStatusEnum;
}

export const RequestDetailsStatusEnum = {
    Pending: 'Pending',
    Accepted: 'Accepted',
    Rejected: 'Rejected'
} as const;

export type RequestDetailsStatusEnum = typeof RequestDetailsStatusEnum[keyof typeof RequestDetailsStatusEnum];

/**
 * 
 * @export
 * @interface RequestResultData
 */
export interface RequestResultData {
    /**
     * 
     * @type {string}
     * @memberof RequestResultData
     */
    'resultStatus'?: RequestResultDataResultStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestResultData
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof RequestResultData
     */
    'offerGiven'?: boolean;
}

export const RequestResultDataResultStatusEnum = {
    Pending: 'Pending',
    Accepted: 'Accepted',
    Rejected: 'Rejected'
} as const;

export type RequestResultDataResultStatusEnum = typeof RequestResultDataResultStatusEnum[keyof typeof RequestResultDataResultStatusEnum];

/**
 * 
 * @export
 * @interface RequestResultUpdate
 */
export interface RequestResultUpdate {
    /**
     * 
     * @type {string}
     * @memberof RequestResultUpdate
     */
    'resultStatus'?: RequestResultUpdateResultStatusEnum | null;
    /**
     * 
     * @type {string}
     * @memberof RequestResultUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof RequestResultUpdate
     */
    'offerGiven'?: boolean | null;
}

export const RequestResultUpdateResultStatusEnum = {
    Pending: 'Pending',
    Accepted: 'Accepted',
    Rejected: 'Rejected'
} as const;

export type RequestResultUpdateResultStatusEnum = typeof RequestResultUpdateResultStatusEnum[keyof typeof RequestResultUpdateResultStatusEnum];

/**
 * 
 * @export
 * @interface RequestStatusSnapshotData
 */
export interface RequestStatusSnapshotData {
    /**
     * 
     * @type {string}
     * @memberof RequestStatusSnapshotData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestStatusSnapshotData
     */
    'dateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestStatusSnapshotData
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface RequestStatusTemplateData
 */
export interface RequestStatusTemplateData {
    /**
     * 
     * @type {string}
     * @memberof RequestStatusTemplateData
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestStatusTemplateData
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Season
     */
    'isClosed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'seasonStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'seasonEnd'?: string;
}
/**
 * 
 * @export
 * @interface SeasonData
 */
export interface SeasonData {
    /**
     * 
     * @type {number}
     * @memberof SeasonData
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeasonData
     */
    'seasonStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeasonData
     */
    'seasonEnd'?: string;
}
/**
 * 
 * @export
 * @interface SeasonDetails
 */
export interface SeasonDetails {
    /**
     * 
     * @type {Season}
     * @memberof SeasonDetails
     */
    'season'?: Season | null;
    /**
     * 
     * @type {Array<CompanyInSeasonInfo>}
     * @memberof SeasonDetails
     */
    'companies'?: Array<CompanyInSeasonInfo> | null;
    /**
     * 
     * @type {Array<StudentInfo>}
     * @memberof SeasonDetails
     */
    'students'?: Array<StudentInfo> | null;
}
/**
 * 
 * @export
 * @interface StudentInfo
 */
export interface StudentInfo {
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'employmentStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'companyId'?: string | null;
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Получает все компании в сезоне.
         * @param {number} year The year for which to retrieve the companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompaniesGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompaniesGet', 'year', year)
            const localVarPath = `/api/season/{year}/companies`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdDelete: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdDelete', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdDelete', 'id', id)
            const localVarPath = `/api/season/{year}/company/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdPost: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdPost', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdPost', 'id', id)
            const localVarPath = `/api/season/{year}/company/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Получает все компании в сезоне.
         * @param {number} year The year for which to retrieve the companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompaniesGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyInSeasonInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompaniesGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.apiSeasonYearCompaniesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompanyIdDelete(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompanyIdDelete(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.apiSeasonYearCompanyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompanyIdPost(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyInSeasonInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompanyIdPost(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.apiSeasonYearCompanyIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @summary Получает все компании в сезоне.
         * @param {number} year The year for which to retrieve the companies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompaniesGet(year: number, options?: any): AxiosPromise<Array<CompanyInSeasonInfo>> {
            return localVarFp.apiSeasonYearCompaniesGet(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdDelete(year: number, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearCompanyIdDelete(year, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdPost(year: number, id: string, options?: any): AxiosPromise<CompanyInSeasonInfo> {
            return localVarFp.apiSeasonYearCompanyIdPost(year, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * 
     * @summary Получает все компании в сезоне.
     * @param {number} year The year for which to retrieve the companies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public apiSeasonYearCompaniesGet(year: number, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).apiSeasonYearCompaniesGet(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет компанию из сезона.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the company to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public apiSeasonYearCompanyIdDelete(year: number, id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).apiSeasonYearCompanyIdDelete(year, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавляет компанию в сезон.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public apiSeasonYearCompanyIdPost(year: number, id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).apiSeasonYearCompanyIdPost(year, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PositionsApi - axios parameter creator
 * @export
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Удаляет позицию по её ID.
         * @param {string} id The ID of the position to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPositionIdDelete', 'id', id)
            const localVarPath = `/api/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновление позиции.
         * @param {string} positionId The ID of the position to update.
         * @param {PositionUpdate} [positionUpdate] Updated position data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionPositionIdPut: async (positionId: string, positionUpdate?: PositionUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('apiPositionPositionIdPut', 'positionId', positionId)
            const localVarPath = `/api/position/{positionId}`
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создает новую позицию в компании в сезоне.
         * @param {ApiPositionPostRequest} [apiPositionPostRequest] The data for the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionPost: async (apiPositionPostRequest?: ApiPositionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiPositionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ищет позиции по компаниям, сезону и строке. Возвращает результаты по страницам.
         * @param {number} [year] The year of the season.
         * @param {Array<string>} [companies] The IDs of the companies associated with the positions.
         * @param {string} [q] The search query.
         * @param {number} [page] The page number for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionSearchGet: async (year?: number, companies?: Array<string>, q?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/position/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (companies) {
                localVarQueryParameter['companies'] = companies;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} year 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionYearPositionsPositionIdGet: async (year: number, positionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiPositionYearPositionsPositionIdGet', 'year', year)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('apiPositionYearPositionsPositionIdGet', 'positionId', positionId)
            const localVarPath = `/api/position/{year}/positions/{positionId}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 * @export
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Удаляет позицию по её ID.
         * @param {string} id The ID of the position to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновление позиции.
         * @param {string} positionId The ID of the position to update.
         * @param {PositionUpdate} [positionUpdate] Updated position data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionPositionIdPut(positionId: string, positionUpdate?: PositionUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionPositionIdPut(positionId, positionUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionPositionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создает новую позицию в компании в сезоне.
         * @param {ApiPositionPostRequest} [apiPositionPostRequest] The data for the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionPost(apiPositionPostRequest?: ApiPositionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionPost(apiPositionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Ищет позиции по компаниям, сезону и строке. Возвращает результаты по страницам.
         * @param {number} [year] The year of the season.
         * @param {Array<string>} [companies] The IDs of the companies associated with the positions.
         * @param {string} [q] The search query.
         * @param {number} [page] The page number for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionSearchGet(year?: number, companies?: Array<string>, q?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionInfoPaginatedItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionSearchGet(year, companies, q, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} year 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionYearPositionsPositionIdGet(year: number, positionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionYearPositionsPositionIdGet(year, positionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionYearPositionsPositionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PositionsApi - factory interface
 * @export
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Удаляет позицию по её ID.
         * @param {string} id The ID of the position to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPositionIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновление позиции.
         * @param {string} positionId The ID of the position to update.
         * @param {PositionUpdate} [positionUpdate] Updated position data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionPositionIdPut(positionId: string, positionUpdate?: PositionUpdate, options?: any): AxiosPromise<PositionUpdate> {
            return localVarFp.apiPositionPositionIdPut(positionId, positionUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создает новую позицию в компании в сезоне.
         * @param {ApiPositionPostRequest} [apiPositionPostRequest] The data for the position.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionPost(apiPositionPostRequest?: ApiPositionPostRequest, options?: any): AxiosPromise<PositionInfo> {
            return localVarFp.apiPositionPost(apiPositionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ищет позиции по компаниям, сезону и строке. Возвращает результаты по страницам.
         * @param {number} [year] The year of the season.
         * @param {Array<string>} [companies] The IDs of the companies associated with the positions.
         * @param {string} [q] The search query.
         * @param {number} [page] The page number for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionSearchGet(year?: number, companies?: Array<string>, q?: string, page?: number, options?: any): AxiosPromise<PositionInfoPaginatedItems> {
            return localVarFp.apiPositionSearchGet(year, companies, q, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} year 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionYearPositionsPositionIdGet(year: number, positionId: string, options?: any): AxiosPromise<PositionInfo> {
            return localVarFp.apiPositionYearPositionsPositionIdGet(year, positionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionsApi - object-oriented interface
 * @export
 * @class PositionsApi
 * @extends {BaseAPI}
 */
export class PositionsApi extends BaseAPI {
    /**
     * 
     * @summary Удаляет позицию по её ID.
     * @param {string} id The ID of the position to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновление позиции.
     * @param {string} positionId The ID of the position to update.
     * @param {PositionUpdate} [positionUpdate] Updated position data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionPositionIdPut(positionId: string, positionUpdate?: PositionUpdate, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionPositionIdPut(positionId, positionUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создает новую позицию в компании в сезоне.
     * @param {ApiPositionPostRequest} [apiPositionPostRequest] The data for the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionPost(apiPositionPostRequest?: ApiPositionPostRequest, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionPost(apiPositionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ищет позиции по компаниям, сезону и строке. Возвращает результаты по страницам.
     * @param {number} [year] The year of the season.
     * @param {Array<string>} [companies] The IDs of the companies associated with the positions.
     * @param {string} [q] The search query.
     * @param {number} [page] The page number for pagination.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionSearchGet(year?: number, companies?: Array<string>, q?: string, page?: number, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionSearchGet(year, companies, q, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} year 
     * @param {string} positionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionYearPositionsPositionIdGet(year: number, positionId: string, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionYearPositionsPositionIdGet(year, positionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для администратора.
         * @param {Array<number>} [seasons] Фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {Array<string>} [studentIds] фильтрация по студентам.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestGet: async (seasons?: Array<number>, companyIds?: Array<string>, studentIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seasons) {
                localVarQueryParameter['seasons'] = seasons;
            }

            if (companyIds) {
                localVarQueryParameter['companyIds'] = companyIds;
            }

            if (studentIds) {
                localVarQueryParameter['studentIds'] = studentIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeHistory !== undefined) {
                localVarQueryParameter['includeHistory'] = includeHistory;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для студента.
         * @param {Array<number>} [seasons] фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestMyGet: async (seasons?: Array<number>, companyIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (seasons) {
                localVarQueryParameter['seasons'] = seasons;
            }

            if (companyIds) {
                localVarQueryParameter['companyIds'] = companyIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeHistory !== undefined) {
                localVarQueryParameter['includeHistory'] = includeHistory;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать запрос с начальным статусом.
         * @param {string} positionId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestPositionPositionIdStatusRequestStatusIdPost: async (positionId: string, requestStatusId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('apiRequestPositionPositionIdStatusRequestStatusIdPost', 'positionId', positionId)
            // verify required parameter 'requestStatusId' is not null or undefined
            assertParamExists('apiRequestPositionPositionIdStatusRequestStatusIdPost', 'requestStatusId', requestStatusId)
            const localVarPath = `/api/request/position/{positionId}/status/{requestStatusId}`
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)))
                .replace(`{${"requestStatusId"}}`, encodeURIComponent(String(requestStatusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdGet: async (requestId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('apiRequestRequestIdGet', 'requestId', requestId)
            const localVarPath = `/api/request/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить статус запроса.
         * @param {string} requestId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdRequestStatusRequestStatusIdPut: async (requestId: string, requestStatusId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('apiRequestRequestIdRequestStatusRequestStatusIdPut', 'requestId', requestId)
            // verify required parameter 'requestStatusId' is not null or undefined
            assertParamExists('apiRequestRequestIdRequestStatusRequestStatusIdPut', 'requestStatusId', requestStatusId)
            const localVarPath = `/api/request/{requestId}/request_status/{requestStatusId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)))
                .replace(`{${"requestStatusId"}}`, encodeURIComponent(String(requestStatusId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить результат запроса. Статусы:(Pending,Accepted,Rejected)
         * @param {string} requestId 
         * @param {RequestResultUpdate} [requestResultUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdResultStatusPut: async (requestId: string, requestResultUpdate?: RequestResultUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('apiRequestRequestIdResultStatusPut', 'requestId', requestId)
            const localVarPath = `/api/request/{requestId}/result_status`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestResultUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для администратора.
         * @param {Array<number>} [seasons] Фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {Array<string>} [studentIds] фильтрация по студентам.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestGet(seasons?: Array<number>, companyIds?: Array<string>, studentIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDataPaginatedItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestGet(seasons, companyIds, studentIds, page, pageSize, includeHistory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для студента.
         * @param {Array<number>} [seasons] фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestMyGet(seasons?: Array<number>, companyIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDataPaginatedItems>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestMyGet(seasons, companyIds, page, pageSize, includeHistory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestMyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать запрос с начальным статусом.
         * @param {string} positionId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId: string, requestStatusId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId, requestStatusId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestPositionPositionIdStatusRequestStatusIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestRequestIdGet(requestId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestRequestIdGet(requestId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить статус запроса.
         * @param {string} requestId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId: string, requestStatusId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId, requestStatusId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestRequestIdRequestStatusRequestStatusIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить результат запроса. Статусы:(Pending,Accepted,Rejected)
         * @param {string} requestId 
         * @param {RequestResultUpdate} [requestResultUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestRequestIdResultStatusPut(requestId: string, requestResultUpdate?: RequestResultUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestRequestIdResultStatusPut(requestId, requestResultUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestRequestIdResultStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestApiFp(configuration)
    return {
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для администратора.
         * @param {Array<number>} [seasons] Фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {Array<string>} [studentIds] фильтрация по студентам.
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestGet(seasons?: Array<number>, companyIds?: Array<string>, studentIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: any): AxiosPromise<RequestDataPaginatedItems> {
            return localVarFp.apiRequestGet(seasons, companyIds, studentIds, page, pageSize, includeHistory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает информацию о запросах стажировку. Endpoint для студента.
         * @param {Array<number>} [seasons] фильтрация по сезонам
         * @param {Array<string>} [companyIds] фильтрация по компаниям
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestMyGet(seasons?: Array<number>, companyIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: any): AxiosPromise<RequestDataPaginatedItems> {
            return localVarFp.apiRequestMyGet(seasons, companyIds, page, pageSize, includeHistory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать запрос с начальным статусом.
         * @param {string} positionId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId: string, requestStatusId: string, options?: any): AxiosPromise<RequestDetails> {
            return localVarFp.apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId, requestStatusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdGet(requestId: string, options?: any): AxiosPromise<RequestData> {
            return localVarFp.apiRequestRequestIdGet(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить статус запроса.
         * @param {string} requestId 
         * @param {string} requestStatusId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId: string, requestStatusId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId, requestStatusId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить результат запроса. Статусы:(Pending,Accepted,Rejected)
         * @param {string} requestId 
         * @param {RequestResultUpdate} [requestResultUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestIdResultStatusPut(requestId: string, requestResultUpdate?: RequestResultUpdate, options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestRequestIdResultStatusPut(requestId, requestResultUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * 
     * @summary Получает информацию о запросах стажировку. Endpoint для администратора.
     * @param {Array<number>} [seasons] Фильтрация по сезонам
     * @param {Array<string>} [companyIds] фильтрация по компаниям
     * @param {Array<string>} [studentIds] фильтрация по студентам.
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestGet(seasons?: Array<number>, companyIds?: Array<string>, studentIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestGet(seasons, companyIds, studentIds, page, pageSize, includeHistory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает информацию о запросах стажировку. Endpoint для студента.
     * @param {Array<number>} [seasons] фильтрация по сезонам
     * @param {Array<string>} [companyIds] фильтрация по компаниям
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {boolean} [includeHistory] включать всю историю статусов, или включать только текущий статус запроса.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestMyGet(seasons?: Array<number>, companyIds?: Array<string>, page?: number, pageSize?: number, includeHistory?: boolean, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestMyGet(seasons, companyIds, page, pageSize, includeHistory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать запрос с начальным статусом.
     * @param {string} positionId 
     * @param {string} requestStatusId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId: string, requestStatusId: string, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestPositionPositionIdStatusRequestStatusIdPost(positionId, requestStatusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestRequestIdGet(requestId: string, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestRequestIdGet(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить статус запроса.
     * @param {string} requestId 
     * @param {string} requestStatusId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId: string, requestStatusId: string, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestRequestIdRequestStatusRequestStatusIdPut(requestId, requestStatusId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить результат запроса. Статусы:(Pending,Accepted,Rejected)
     * @param {string} requestId 
     * @param {RequestResultUpdate} [requestResultUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestRequestIdResultStatusPut(requestId: string, requestResultUpdate?: RequestResultUpdate, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestRequestIdResultStatusPut(requestId, requestResultUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RequestStatusTemplatesApi - axios parameter creator
 * @export
 */
export const RequestStatusTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать статус в сезоне
         * @param {number} year 
         * @param {string} statusName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonYearRequestStatusStatusNamePost: async (year: number, statusName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('seasonYearRequestStatusStatusNamePost', 'year', year)
            // verify required parameter 'statusName' is not null or undefined
            assertParamExists('seasonYearRequestStatusStatusNamePost', 'statusName', statusName)
            const localVarPath = `/season/{year}/request_status/{statusName}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"statusName"}}`, encodeURIComponent(String(statusName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает все допустимые статусы запроса в сезоне
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonYearRequestStatusesGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('seasonYearRequestStatusesGet', 'year', year)
            const localVarPath = `/season/{year}/request_statuses`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestStatusTemplatesApi - functional programming interface
 * @export
 */
export const RequestStatusTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestStatusTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создать статус в сезоне
         * @param {number} year 
         * @param {string} statusName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonYearRequestStatusStatusNamePost(year: number, statusName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonYearRequestStatusStatusNamePost(year, statusName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestStatusTemplatesApi.seasonYearRequestStatusStatusNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает все допустимые статусы запроса в сезоне
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seasonYearRequestStatusesGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestStatusTemplateData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seasonYearRequestStatusesGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestStatusTemplatesApi.seasonYearRequestStatusesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequestStatusTemplatesApi - factory interface
 * @export
 */
export const RequestStatusTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestStatusTemplatesApiFp(configuration)
    return {
        /**
         * 
         * @summary Создать статус в сезоне
         * @param {number} year 
         * @param {string} statusName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonYearRequestStatusStatusNamePost(year: number, statusName: string, options?: any): AxiosPromise<void> {
            return localVarFp.seasonYearRequestStatusStatusNamePost(year, statusName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает все допустимые статусы запроса в сезоне
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonYearRequestStatusesGet(year: number, options?: any): AxiosPromise<Array<RequestStatusTemplateData>> {
            return localVarFp.seasonYearRequestStatusesGet(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestStatusTemplatesApi - object-oriented interface
 * @export
 * @class RequestStatusTemplatesApi
 * @extends {BaseAPI}
 */
export class RequestStatusTemplatesApi extends BaseAPI {
    /**
     * 
     * @summary Создать статус в сезоне
     * @param {number} year 
     * @param {string} statusName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestStatusTemplatesApi
     */
    public seasonYearRequestStatusStatusNamePost(year: number, statusName: string, options?: RawAxiosRequestConfig) {
        return RequestStatusTemplatesApiFp(this.configuration).seasonYearRequestStatusStatusNamePost(year, statusName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает все допустимые статусы запроса в сезоне
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestStatusTemplatesApi
     */
    public seasonYearRequestStatusesGet(year: number, options?: RawAxiosRequestConfig) {
        return RequestStatusTemplatesApiFp(this.configuration).seasonYearRequestStatusesGet(year, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeasonsApi - axios parameter creator
 * @export
 */
export const SeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonMyCurrentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/season/my/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создает новый сезон.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonPost: async (apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/season`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiSeasonYearPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Завершает текущий сезон. После завершения в нем нельзя создавать заявки и добавлять компании
         * @param {number} year The year of the season to close.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearClosePost: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearClosePost', 'year', year)
            const localVarPath = `/api/season/{year}/close`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearDelete: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearDelete', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ЭНДПОИНТ РАБОТАЕТ, НО ЛУЧШЕ ИСПОЛЬЗОВАТЬ ОТДЕЛЬНЫЕ ДЛЯ СТУДЕНТОВ И КОМПАНИЙ. Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiSeasonYearGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearGet', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает информацию о сезоне.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearInfoGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearInfoGet', 'year', year)
            const localVarPath = `/api/season/{year}/info`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearPut: async (year: number, apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearPut', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiSeasonYearPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonMyCurrentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonMyCurrentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonMyCurrentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создает новый сезон.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonPost(apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonPost(apiSeasonYearPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Завершает текущий сезон. После завершения в нем нельзя создавать заявки и добавлять компании
         * @param {number} year The year of the season to close.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearClosePost(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearClosePost(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearClosePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearDelete(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearDelete(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ЭНДПОИНТ РАБОТАЕТ, НО ЛУЧШЕ ИСПОЛЬЗОВАТЬ ОТДЕЛЬНЫЕ ДЛЯ СТУДЕНТОВ И КОМПАНИЙ. Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async apiSeasonYearGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает информацию о сезоне.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearInfoGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearInfoGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearPut(year: number, apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearPut(year, apiSeasonYearPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Season>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeasonsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonMyCurrentGet(options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonMyCurrentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создает новый сезон.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonPost(apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonPost(apiSeasonYearPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Завершает текущий сезон. После завершения в нем нельзя создавать заявки и добавлять компании
         * @param {number} year The year of the season to close.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearClosePost(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearClosePost(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearDelete(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearDelete(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ЭНДПОИНТ РАБОТАЕТ, НО ЛУЧШЕ ИСПОЛЬЗОВАТЬ ОТДЕЛЬНЫЕ ДЛЯ СТУДЕНТОВ И КОМПАНИЙ. Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        apiSeasonYearGet(year: number, options?: any): AxiosPromise<SeasonDetails> {
            return localVarFp.apiSeasonYearGet(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает информацию о сезоне.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearInfoGet(year: number, options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonYearInfoGet(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearPut(year: number, apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonYearPut(year, apiSeasonYearPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonsGet(options?: any): AxiosPromise<Array<Season>> {
            return localVarFp.apiSeasonsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonMyCurrentGet(options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonMyCurrentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создает новый сезон.
     * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The data for the new season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonPost(apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonPost(apiSeasonYearPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Завершает текущий сезон. После завершения в нем нельзя создавать заявки и добавлять компании
     * @param {number} year The year of the season to close.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearClosePost(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearClosePost(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет сезон.
     * @param {number} year The year of the season to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearDelete(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearDelete(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ЭНДПОИНТ РАБОТАЕТ, НО ЛУЧШЕ ИСПОЛЬЗОВАТЬ ОТДЕЛЬНЫЕ ДЛЯ СТУДЕНТОВ И КОМПАНИЙ. Получает детали о сезоне, включая компании и студентов в нем.
     * @param {number} year The year of the season to retrieve.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearGet(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearGet(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает информацию о сезоне.
     * @param {number} year The year of the season to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearInfoGet(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearInfoGet(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет сезон.
     * @param {number} year The year of the season to update.
     * @param {ApiSeasonYearPutRequest} [apiSeasonYearPutRequest] The updated season data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearPut(year: number, apiSeasonYearPutRequest?: ApiSeasonYearPutRequest, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearPut(year, apiSeasonYearPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает все сезоны.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonsGet(options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentsApi - axios parameter creator
 * @export
 */
export const StudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdDelete: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdDelete', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdDelete', 'id', id)
            const localVarPath = `/api/season/{year}/student/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdPost: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdPost', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdPost', 'id', id)
            const localVarPath = `/api/season/{year}/student/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает всех студентов в сезоне.
         * @param {number} year The year for which to retrieve the students.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentsGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearStudentsGet', 'year', year)
            const localVarPath = `/api/season/{year}/students`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsApi - functional programming interface
 * @export
 */
export const StudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearStudentIdDelete(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearStudentIdDelete(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.apiSeasonYearStudentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearStudentIdPost(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearStudentIdPost(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.apiSeasonYearStudentIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает всех студентов в сезоне.
         * @param {number} year The year for which to retrieve the students.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearStudentsGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearStudentsGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.apiSeasonYearStudentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentsApi - factory interface
 * @export
 */
export const StudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdDelete(year: number, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearStudentIdDelete(year, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdPost(year: number, id: string, options?: any): AxiosPromise<StudentInfo> {
            return localVarFp.apiSeasonYearStudentIdPost(year, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает всех студентов в сезоне.
         * @param {number} year The year for which to retrieve the students.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentsGet(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearStudentsGet(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsApi - object-oriented interface
 * @export
 * @class StudentsApi
 * @extends {BaseAPI}
 */
export class StudentsApi extends BaseAPI {
    /**
     * 
     * @summary Удаляет студента из сезона.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the student to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public apiSeasonYearStudentIdDelete(year: number, id: string, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).apiSeasonYearStudentIdDelete(year, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавляет студента в сезон.
     * @param {number} year The year of the season
     * @param {string} id The ID of the student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public apiSeasonYearStudentIdPost(year: number, id: string, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).apiSeasonYearStudentIdPost(year, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает всех студентов в сезоне.
     * @param {number} year The year for which to retrieve the students.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public apiSeasonYearStudentsGet(year: number, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).apiSeasonYearStudentsGet(year, options).then((request) => request(this.axios, this.basePath));
    }
}



