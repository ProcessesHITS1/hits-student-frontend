/* tslint:disable */
/* eslint-disable */
/**
 * Interview service api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CompanyInSeasonInfo
 */
export interface CompanyInSeasonInfo {
    /**
     * 
     * @type {string}
     * @memberof CompanyInSeasonInfo
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof CompanyInSeasonInfo
     */
    'seasonYear'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompanyInSeasonInfo
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CompanyInSeasonInfo
     */
    'nPositions'?: number;
}
/**
 * 
 * @export
 * @interface PositionData
 */
export interface PositionData {
    /**
     * 
     * @type {string}
     * @memberof PositionData
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionData
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PositionData
     */
    'nPositions'?: number;
}
/**
 * 
 * @export
 * @interface PositionDetails
 */
export interface PositionDetails {
    /**
     * 
     * @type {PositionInfo}
     * @memberof PositionDetails
     */
    'positionInfo'?: PositionInfo;
    /**
     * 
     * @type {CompanyInSeasonInfo}
     * @memberof PositionDetails
     */
    'companyInfo'?: CompanyInSeasonInfo;
}
/**
 * 
 * @export
 * @interface PositionInfo
 */
export interface PositionInfo {
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PositionInfo
     */
    'nPositions'?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionInfo
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface RequestDetails
 */
export interface RequestDetails {
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'studentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetails
     */
    'positionId'?: string;
    /**
     * 
     * @type {RequestStatus}
     * @memberof RequestDetails
     */
    'status'?: RequestStatus;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const RequestStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type RequestStatus = typeof RequestStatus[keyof typeof RequestStatus];


/**
 * 
 * @export
 * @interface Season
 */
export interface Season {
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Season
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'seasonStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof Season
     */
    'seasonEnd'?: string;
}
/**
 * 
 * @export
 * @interface SeasonData
 */
export interface SeasonData {
    /**
     * 
     * @type {number}
     * @memberof SeasonData
     */
    'year'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeasonData
     */
    'seasonStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeasonData
     */
    'seasonEnd'?: string;
}
/**
 * 
 * @export
 * @interface SeasonDetails
 */
export interface SeasonDetails {
    /**
     * 
     * @type {Season}
     * @memberof SeasonDetails
     */
    'season'?: Season;
    /**
     * 
     * @type {Array<CompanyInSeasonInfo>}
     * @memberof SeasonDetails
     */
    'companies'?: Array<CompanyInSeasonInfo> | null;
    /**
     * 
     * @type {Array<StudentInfo>}
     * @memberof SeasonDetails
     */
    'students'?: Array<StudentInfo> | null;
}
/**
 * 
 * @export
 * @interface StudentInfo
 */
export interface StudentInfo {
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StudentInfo
     */
    'employmentStatus'?: string | null;
}

/**
 * CompaniesApi - axios parameter creator
 * @export
 */
export const CompaniesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdDelete: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdDelete', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdDelete', 'id', id)
            const localVarPath = `/api/season/{year}/company/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdPost: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdPost', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearCompanyIdPost', 'id', id)
            const localVarPath = `/api/season/{year}/company/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompaniesApi - functional programming interface
 * @export
 */
export const CompaniesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompaniesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompanyIdDelete(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompanyIdDelete(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.apiSeasonYearCompanyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompanyIdPost(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyInSeasonInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompanyIdPost(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompaniesApi.apiSeasonYearCompanyIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompaniesApi - factory interface
 * @export
 */
export const CompaniesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompaniesApiFp(configuration)
    return {
        /**
         * 
         * @summary Удаляет компанию из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdDelete(year: number, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearCompanyIdDelete(year, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавляет компанию в сезон.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyIdPost(year: number, id: string, options?: any): AxiosPromise<CompanyInSeasonInfo> {
            return localVarFp.apiSeasonYearCompanyIdPost(year, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompaniesApi - object-oriented interface
 * @export
 * @class CompaniesApi
 * @extends {BaseAPI}
 */
export class CompaniesApi extends BaseAPI {
    /**
     * 
     * @summary Удаляет компанию из сезона.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the company to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public apiSeasonYearCompanyIdDelete(year: number, id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).apiSeasonYearCompanyIdDelete(year, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавляет компанию в сезон.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the company.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompaniesApi
     */
    public apiSeasonYearCompanyIdPost(year: number, id: string, options?: RawAxiosRequestConfig) {
        return CompaniesApiFp(this.configuration).apiSeasonYearCompanyIdPost(year, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PositionsApi - axios parameter creator
 * @export
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<string>} [companies] 
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionSearchGet: async (companies?: Array<string>, q?: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/position/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (companies) {
                localVarQueryParameter['companies'] = companies;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} year 
         * @param {string} companyId 
         * @param {PositionData} [positionData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyCompanyIdPositionPost: async (year: number, companyId: string, positionData?: PositionData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearCompanyCompanyIdPositionPost', 'year', year)
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('apiSeasonYearCompanyCompanyIdPositionPost', 'companyId', companyId)
            const localVarPath = `/api/season/{year}/company/{companyId}/position`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 * @export
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [companies] 
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPositionSearchGet(companies?: Array<string>, q?: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPositionSearchGet(companies, q, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiPositionSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} year 
         * @param {string} companyId 
         * @param {PositionData} [positionData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearCompanyCompanyIdPositionPost(year: number, companyId: string, positionData?: PositionData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearCompanyCompanyIdPositionPost(year, companyId, positionData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PositionsApi.apiSeasonYearCompanyCompanyIdPositionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PositionsApi - factory interface
 * @export
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<string>} [companies] 
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPositionSearchGet(companies?: Array<string>, q?: string, page?: number, options?: any): AxiosPromise<Array<PositionDetails>> {
            return localVarFp.apiPositionSearchGet(companies, q, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} year 
         * @param {string} companyId 
         * @param {PositionData} [positionData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearCompanyCompanyIdPositionPost(year: number, companyId: string, positionData?: PositionData, options?: any): AxiosPromise<PositionInfo> {
            return localVarFp.apiSeasonYearCompanyCompanyIdPositionPost(year, companyId, positionData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionsApi - object-oriented interface
 * @export
 * @class PositionsApi
 * @extends {BaseAPI}
 */
export class PositionsApi extends BaseAPI {
    /**
     * 
     * @param {Array<string>} [companies] 
     * @param {string} [q] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiPositionSearchGet(companies?: Array<string>, q?: string, page?: number, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiPositionSearchGet(companies, q, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} year 
     * @param {string} companyId 
     * @param {PositionData} [positionData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApi
     */
    public apiSeasonYearCompanyCompanyIdPositionPost(year: number, companyId: string, positionData?: PositionData, options?: RawAxiosRequestConfig) {
        return PositionsApiFp(this.configuration).apiSeasonYearCompanyCompanyIdPositionPost(year, companyId, positionData, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRequestIdGet', 'id', id)
            const localVarPath = `/api/request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestStatusPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request/request_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestResultStatusPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/request/result_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} studentId 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestStudentStudentIdPositionPositionIdPost: async (studentId: string, positionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('apiRequestStudentStudentIdPositionPositionIdPost', 'studentId', studentId)
            // verify required parameter 'positionId' is not null or undefined
            assertParamExists('apiRequestStudentStudentIdPositionPositionIdPost', 'positionId', positionId)
            const localVarPath = `/api/request/student/{studentId}/position/{positionId}`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)))
                .replace(`{${"positionId"}}`, encodeURIComponent(String(positionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestRequestStatusPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestRequestStatusPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestRequestStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestResultStatusPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestResultStatusPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestResultStatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} studentId 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRequestStudentStudentIdPositionPositionIdPost(studentId: string, positionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRequestStudentStudentIdPositionPositionIdPost(studentId, positionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RequestApi.apiRequestStudentStudentIdPositionPositionIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestDelete(options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestIdGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestRequestStatusPut(options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestRequestStatusPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestResultStatusPut(options?: any): AxiosPromise<void> {
            return localVarFp.apiRequestResultStatusPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} studentId 
         * @param {string} positionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRequestStudentStudentIdPositionPositionIdPost(studentId: string, positionId: string, options?: any): AxiosPromise<RequestDetails> {
            return localVarFp.apiRequestStudentStudentIdPositionPositionIdPost(studentId, positionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestDelete(options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestGet(options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestIdGet(id: string, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestRequestStatusPut(options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestRequestStatusPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestResultStatusPut(options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestResultStatusPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} studentId 
     * @param {string} positionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public apiRequestStudentStudentIdPositionPositionIdPost(studentId: string, positionId: string, options?: RawAxiosRequestConfig) {
        return RequestApiFp(this.configuration).apiRequestStudentStudentIdPositionPositionIdPost(studentId, positionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeasonsApi - axios parameter creator
 * @export
 */
export const SeasonsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создает новый сезон.
         * @param {SeasonData} [seasonData] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonPost: async (seasonData?: SeasonData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/season`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seasonData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearDelete: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearDelete', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearGet', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {SeasonData} [seasonData] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearPut: async (year: number, seasonData?: SeasonData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearPut', 'year', year)
            const localVarPath = `/api/season/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(seasonData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/seasons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeasonsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создает новый сезон.
         * @param {SeasonData} [seasonData] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonPost(seasonData?: SeasonData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonPost(seasonData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearDelete(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearDelete(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeasonDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {SeasonData} [seasonData] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearPut(year: number, seasonData?: SeasonData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Season>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearPut(year, seasonData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonYearPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Season>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeasonsApi.apiSeasonsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeasonsApiFp(configuration)
    return {
        /**
         * 
         * @summary Создает новый сезон.
         * @param {SeasonData} [seasonData] The data for the new season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonPost(seasonData?: SeasonData, options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonPost(seasonData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удаляет сезон.
         * @param {number} year The year of the season to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearDelete(year: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearDelete(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает детали о сезоне, включая компании и студентов в нем.
         * @param {number} year The year of the season to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearGet(year: number, options?: any): AxiosPromise<SeasonDetails> {
            return localVarFp.apiSeasonYearGet(year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновляет сезон.
         * @param {number} year The year of the season to update.
         * @param {SeasonData} [seasonData] The updated season data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearPut(year: number, seasonData?: SeasonData, options?: any): AxiosPromise<Season> {
            return localVarFp.apiSeasonYearPut(year, seasonData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получает все сезоны.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonsGet(options?: any): AxiosPromise<Array<Season>> {
            return localVarFp.apiSeasonsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI {
    /**
     * 
     * @summary Создает новый сезон.
     * @param {SeasonData} [seasonData] The data for the new season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonPost(seasonData?: SeasonData, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonPost(seasonData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удаляет сезон.
     * @param {number} year The year of the season to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearDelete(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearDelete(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает детали о сезоне, включая компании и студентов в нем.
     * @param {number} year The year of the season to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearGet(year: number, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearGet(year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновляет сезон.
     * @param {number} year The year of the season to update.
     * @param {SeasonData} [seasonData] The updated season data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonYearPut(year: number, seasonData?: SeasonData, options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonYearPut(year, seasonData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получает все сезоны.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    public apiSeasonsGet(options?: RawAxiosRequestConfig) {
        return SeasonsApiFp(this.configuration).apiSeasonsGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentsApi - axios parameter creator
 * @export
 */
export const StudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdDelete: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdDelete', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdDelete', 'id', id)
            const localVarPath = `/api/season/{year}/student/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdPost: async (year: number, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdPost', 'year', year)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiSeasonYearStudentIdPost', 'id', id)
            const localVarPath = `/api/season/{year}/student/{id}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentsApi - functional programming interface
 * @export
 */
export const StudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearStudentIdDelete(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearStudentIdDelete(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.apiSeasonYearStudentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSeasonYearStudentIdPost(year: number, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSeasonYearStudentIdPost(year, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentsApi.apiSeasonYearStudentIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentsApi - factory interface
 * @export
 */
export const StudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Удаляет студента из сезона.
         * @param {number} year The year of the season.
         * @param {string} id The ID of the student to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdDelete(year: number, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSeasonYearStudentIdDelete(year, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Добавляет студента в сезон.
         * @param {number} year The year of the season
         * @param {string} id The ID of the student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSeasonYearStudentIdPost(year: number, id: string, options?: any): AxiosPromise<StudentInfo> {
            return localVarFp.apiSeasonYearStudentIdPost(year, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentsApi - object-oriented interface
 * @export
 * @class StudentsApi
 * @extends {BaseAPI}
 */
export class StudentsApi extends BaseAPI {
    /**
     * 
     * @summary Удаляет студента из сезона.
     * @param {number} year The year of the season.
     * @param {string} id The ID of the student to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public apiSeasonYearStudentIdDelete(year: number, id: string, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).apiSeasonYearStudentIdDelete(year, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Добавляет студента в сезон.
     * @param {number} year The year of the season
     * @param {string} id The ID of the student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentsApi
     */
    public apiSeasonYearStudentIdPost(year: number, id: string, options?: RawAxiosRequestConfig) {
        return StudentsApiFp(this.configuration).apiSeasonYearStudentIdPost(year, id, options).then((request) => request(this.axios, this.basePath));
    }
}



